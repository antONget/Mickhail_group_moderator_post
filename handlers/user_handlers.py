import asyncio
import random
from aiogram import Router, Bot, F
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart, StateFilter
from filters.admin_filter import check_manager, check_super_admin
from database import requests as rq
from keyboards import user_keyboard as kb
import logging
from typing import List
from utils.error_handling import error_handler
from utils.send_admins import send_message_manager
from aiogram.utils.media_group import MediaGroupBuilder
router = Router()
router.message.filter(F.chat.type == "private")


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class User(StatesGroup):
    description = State()
    photo = State()
    info = State()


@router.message(CommandStart())
@error_handler
async def process_press_start(message: Message, bot: Bot) -> None:
    logging.info('process_press_start')
    if message.from_user.username:
        username = message.from_user.username
    else:
        username = 'USER'
    data_user = {'tg_id': message.from_user.id, 'username': username}
    await rq.add_user(data=data_user)
    if await check_manager(telegram_id=message.from_user.id) or await check_super_admin(telegram_id=message.from_user.id):
        await message.answer(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞ –≤–∞—à–∏—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø—É.'
                                  ' –î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–∫–ª–∞–º—ã –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª',
                             reply_markup=kb.keyboard_main_manager())
    else:
        await message.answer(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞ –≤–∞—à–∏—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø—É.'
                                  ' –î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–∫–ª–∞–º—ã –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª',
                             reply_markup=kb.keyboard_main_button())


@router.message(lambda message: message.text in ['–ß–∞—Å—Ç–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ'])
@error_handler
async def process_advertisement(message: Message, bot: Bot, state: FSMContext):
    logging.info('process_advertisement')
    await state.update_data(type_order=message.text)
    await message.answer(text='<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è.</b>\n'
                              '–†–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –∫ –ø—Ä–æ–¥–∞–∂–µ —Ç–æ–ª—å–∫–æ —Å–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–µ –∏–ª–∏ –±—É, –Ω–æ —Ç–æ–ª—å–∫–æ –≤'
                              ' –µ–¥–∏–Ω–∏—á–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–∞—Ö. –ü—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –≤—ã—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Ñ–æ—Ç–æ.'
                              ' –°—Å—ã–ª–∫–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –Ω–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç—Å—è –∏ –±—É–¥—É—Ç —É–¥–∞–ª—è—Ç—å—Å—è.\n'
                              '–¶–µ–Ω—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∞–º –ø—Ä–æ–¥–∞–≤–µ—Ü –∏ –µ–º—É —Ä–µ—à–∞—Ç—å –ø–æ –∫–∞–∫–æ–π —Ü–µ–Ω–µ –æ–Ω –ø—Ä–æ–¥–∞—Å—Ç —Å–≤–æ–π —Ç–æ–≤–∞—Ä.\n'
                              '–¢–æ—Ä–≥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è. –ü—Ä–∏ –æ–±–æ—é–¥–Ω–æ–º —Ä–µ—à–µ–Ω–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ª—Å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è.\n'
                              '–ü–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ —Å–¥–µ–ª–∫–µ (–¥–ª—è —á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞).')
    await asyncio.sleep(5)
    await message.answer(text='–î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏—à–ª–∏—Ç–µ –±–æ—Ç—É –ø–æ –µ–≥–æ –∑–∞–ø—Ä–æ—Å—É'
                              ' –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ:\n'
                              '1.üìù <u>–û–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è</u>\n'
                              '2.üì∏ <u>–§–æ—Ç–æ–º–∞—Ç–µ—Ä–∏–∞–ª</u>\n'
                              '3.‚òéÔ∏è <u>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</u>\n')
    await message.answer(text='–ü—Ä–∏—à–ª–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è üìù.')
    await state.set_state(User.description)


@router.message(F.text, StateFilter(User.description))
@error_handler
async def get_description(message: Message, bot: Bot, state: FSMContext):
    logging.info('get_description')
    if message.text in ['–ß–∞—Å—Ç–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', '–£—Å–ª—É–≥–∏', '–ó–∞—è–≤–∫–∏']:
        await state.set_state(state=None)
        await message.answer('–û—Ç–ø—Ä–∞–≤–∫–∞ –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞...')
        return
    await state.update_data(description=message.text)
    await message.answer(text='–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã üì∏.')
    await state.set_state(User.photo)
    await state.update_data(content=[])
    await state.update_data(count=[])


@router.message(StateFilter(User.photo), F.photo)
@error_handler
async def request_content_photo(message: Message, state: FSMContext, bot: Bot):
    logging.info(f'request_content_photo {message.photo[-1].file_id}')
    await asyncio.sleep(random.random())
    data = await state.get_data()
    list_content = data.get('content', [])
    count = data.get('count', [])
    content = message.photo[-1].file_id
    list_content.append(content)
    count.append(content)
    await state.update_data(content=list_content)
    await state.update_data(count=count)
    if len(count) == 1:
        await message.answer(text='–î–æ–±–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"',
                             reply_markup=kb.keyboard_continue())


@router.callback_query(F.data == 'add_photo')
@error_handler
async def get_photo(callback: CallbackQuery, state: FSMContext, bot: Bot):
    logging.info(f'add_photo {callback.message.chat.id}')
    await callback.message.edit_text(text='–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã üì∏.',
                                     reply_markup=None)
    await state.update_data(count=[])
    await state.set_state(User.photo)


@router.callback_query(F.data == 'continue')
@error_handler
async def get_photo(callback: CallbackQuery, state: FSMContext, bot: Bot):
    logging.info(f'get_photo {callback.message.chat.id}')
    await state.set_state(state=None)
    await callback.message.edit_text(text='–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é ‚òéÔ∏è.',
                                     reply_markup=None)
    await state.set_state(User.info)


@router.message(F.text, StateFilter(User.info))
@error_handler
async def get_description(message: Message, bot: Bot, state: FSMContext):
    logging.info('get_description')
    if message.text in ['–ß–∞—Å—Ç–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', '–£—Å–ª—É–≥–∏', '–ó–∞—è–≤–∫–∏']:
        await state.set_state(state=None)
        await message.answer('–û—Ç–ø—Ä–∞–≤–∫–∞ –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞...')
        return
    await state.update_data(info=message.text)
    await message.answer(text='–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –≤–∞—à–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é,'
                              ' –æ–∂–∏–¥–∞–π—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏')
    data = await state.get_data()
    data_order = {'type_order': data['type_order'], 'create_tg_id': message.from_user.id,
                  'description': data['description'], 'photo': ','.join(data['content']),
                  'info': data['info'], 'status': rq.OrderStatus.create}
    await rq.add_order(data=data_order)
    await send_message_manager(bot=bot, text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –æ—Å—Ç–∞–≤–∏–ª –∑–∞—è–≤–∫—É –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ'
                                             f'–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {data["type_order"]}')
    await state.set_state(state=None)

    # caption = data['description'] + "\n" + "\n" + data['info']
    # media_group = []
    #
    # # media_group.add_photo(media="https://picsum.photos/200/300")
    # # Dynamically add photo with known type without using separate method
    # i = 0
    # for photo in data['content']:
    #     i += 1
    #     if i == 1:
    #         media_group.append(InputMediaPhoto(media=photo, caption=caption))
    #     else:
    #         media_group.append(InputMediaPhoto(media=photo))

    # # ... or video
    # media_group.add(type="video", media=FSInputFile("media/video.mp4"))
    # await bot.send_media_group(chat_id=-1002291300776, media=media_group, message_thread_id=161)


@router.message(F.text == '–£—Å–ª—É–≥–∏')
@error_handler
async def process_services(message: Message, bot: Bot, state: FSMContext):
    logging.info('process_services')
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è',
                         reply_markup=kb.keyboard_services())


@router.callback_query(F.data == 'paid')
@router.callback_query(F.data == 'free_charge')
@error_handler
async def services_publish(callback: CallbackQuery, state: FSMContext, bot: Bot):
    logging.info(f'services_publish {callback.message.chat.id}')
    await callback.message.delete()
    if callback.data == 'paid':
        type_order = '–ü–ª–∞—Ç–Ω–∞—è —É—Å–ª—É–≥–∞'
    elif callback.data == 'free_charge':
        type_order = '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —É—Å–ª—É–≥–∞'
    await state.update_data(type_order=type_order)
    await callback.message.answer(text='<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —É—Å–ª—É–≥–∏.</b>\n'
                                       '–†–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –∫ –ø—Ä–æ–¥–∞–∂–µ —Ç–æ–ª—å–∫–æ —Å–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–µ –∏–ª–∏ –±—É, –Ω–æ —Ç–æ–ª—å–∫–æ –≤'
                                       ' –µ–¥–∏–Ω–∏—á–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–∞—Ö. –ü—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –≤—ã—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Ñ–æ—Ç–æ.'
                                       ' –°—Å—ã–ª–∫–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –Ω–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç—Å—è –∏ –±—É–¥—É—Ç —É–¥–∞–ª—è—Ç—å—Å—è.\n'
                                       '–¶–µ–Ω—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∞–º –ø—Ä–æ–¥–∞–≤–µ—Ü –∏ –µ–º—É —Ä–µ—à–∞—Ç—å –ø–æ –∫–∞–∫–æ–π —Ü–µ–Ω–µ –æ–Ω'
                                       ' –ø—Ä–æ–¥–∞—Å—Ç —Å–≤–æ–π —Ç–æ–≤–∞—Ä.\n'
                                       '–¢–æ—Ä–≥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è. –ü—Ä–∏ –æ–±–æ—é–¥–Ω–æ–º —Ä–µ—à–µ–Ω–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ª—Å –¥–ª—è'
                                       ' –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è.\n'
                                       '–ü–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ —Å–¥–µ–ª–∫–µ'
                                       ' (–¥–ª—è —á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞).')
    await asyncio.sleep(5)
    await callback.message.answer(text='–î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏—à–ª–∏—Ç–µ'
                                       ' –±–æ—Ç—É –ø–æ –µ–≥–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ:\n'
                                       '1.üìù <u>–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏</u>\n'
                                       '2.üì∏ <u>–§–æ—Ç–æ–º–∞—Ç–µ—Ä–∏–∞–ª</u>\n'
                                       '3.‚òéÔ∏è <u>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</u>\n')
    await callback.message.answer(text='–ü—Ä–∏—à–ª–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π —É—Å–ª—É–≥–∏ üìù.')
    await state.set_state(User.description)