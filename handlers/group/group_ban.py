from aiogram import Router, Bot
from aiogram.types import Message
from aiogram.filters import Command, CommandObject, or_f

from filters.admin_chat import IsAdminCheck, IsAdminChat
from filters.groups_chat import IsGroup
from database import requests as rq
from database.models import ChatUser
from utils.error_handling import error_handler

import logging
import asyncio

router = Router()


@router.message(IsGroup(),
                Command('ban', prefix="!"),
                IsAdminChat())
@error_handler
async def into_command_ban_user(message: Message, command: CommandObject, bot: Bot):
    """
    –ö–æ–º–∞–Ω–¥–∞ /ban –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –ø—Ä–æ–µ–∫—Ç–∞ –∏ –≥—Ä—É–ø–ø—ã
    :param message:
    :param command:
    :param bot:
    :return:
    """
    logging.info('into_command_ban_user')
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if not message.reply_to_message:
        await message.answer('–î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã ban —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        return
    if not command.args:
        await message.answer('–î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã ban —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –∫ –∫–æ–º—É –∏ –ø–æ –∫–∞–∫–æ–π –ø—Ä–∏—á–∏–Ω–µ –æ–Ω–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è')
        return
    try:
        reason = command.args
        user_id = message.reply_to_message.from_user.id
    # user_identifier = 0
    # if not command.args:
    #     await message.answer('–î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã !ban —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –∫ –∫–æ–º—É –∏ –ø–æ –∫–∞–∫–æ–π –ø—Ä–∏—á–∏–Ω–µ –æ–Ω–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è')
    #     return
    # args: list = command.args.split(" ", 1)
    # # –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫ –∫–æ–º–∞–Ω–¥–µ
    # if args:
    #     # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    #     user_identifier: str = args[0]
    #     # –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –±—ã–ª–∞ –æ—Ç–≤–µ—Ç–Ω–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    #     if not user_identifier and not message.reply_to_message:
    #         msg = await message.answer("–ö–æ–≥–æ –±–∞–Ω–∏—Ç—å? –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ @username (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).")
    #         await asyncio.sleep(5)
    #         await msg.delete()
    #         return
    #     if not len(args) == 2:
    #         msg = await message.answer("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É ban")
    #         await asyncio.sleep(5)
    #         await msg.delete()
    #         return
    #
    # try:
    #     # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–Ω
    #     if user_identifier:
    #         # –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    #         try:
    #             user_id = int(user_identifier)
    #         except ValueError:
    #             user: ChatUser = await rq.select_chat_user_username(username=user_identifier.replace("@", ""))
    #             if user:
    #                 user_id: int = user.tg_id
    #             else:
    #                 msg = await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å c —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å"
    #                                           " –∫–æ–º–∞–Ω–¥—É –∏—Å–ø–æ–ª—å–∑—É—é ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    #                 await asyncio.sleep(5)
    #                 await msg.delete()
    #                 return
    #     # –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    #     else:
    #         user_id: int = message.reply_to_message.from_user.id
    #     user: ChatUser = await rq.select_chat_user(tg_id=user_id)
        # –µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.ban_chat_member(chat_id=message.chat.id, user_id=user_id)
        msg = await message.answer(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <a href='tg://user?id={message.from_user.id}'>"
                                   f"{message.from_user.username}</a>\n"
                                   f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª <a href='tg://user?id={user_id}'>"
                                   f"{message.reply_to_message.from_user.username}</a>\n"
                                   f"üí¨ –ü–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}")
        await asyncio.sleep(5)
        await msg.delete()
        #
        # else:
        #     msg = await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        #     await asyncio.sleep(5)
        #     await msg.delete()
    except Exception as e:
        msg = await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—à–∏–±–∫–∞: {e}")
        await asyncio.sleep(5)
        await msg.delete()


@router.message(IsGroup(),
                Command('ban', prefix="!"))
@error_handler
async def into_command_ban_user(message: Message,  bot: Bot):
    """
    –ö–æ–º–∞–Ω–¥–∞ /ban –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –ø—Ä–æ–µ–∫—Ç–∞ –∏ –≥—Ä—É–ø–ø—ã
    :param message:
    :param bot:
    :return:
    """
    logging.info('into_command_ban_user')
    msg = await message.answer(text='–ö–æ–º–∞–Ω–¥—É !ban –º–æ–∂–µ—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã')
    await asyncio.sleep(5)
    await msg.delete()
